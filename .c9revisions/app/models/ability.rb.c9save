{"ts":1375753616254,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"class Ability\n  include CanCan::Ability\n\n  def initialize(user)\n    # Define abilities for the passed in user here. For example:\n    #\n    #   user ||= User.new # guest user (not logged in)\n    #   if user.admin?\n    #     can :manage, :all\n    #   else\n    #     can :read, :all\n    #   end\n    #\n    # The first argument to `can` is the action you are giving the user \n    # permission to do.\n    # If you pass :manage it will apply to every action. Other common actions\n    # here are :read, :create, :update and :destroy.\n    #\n    # The second argument is the resource the user can perform the action on. \n    # If you pass :all it will apply to every resource. Otherwise pass a Ruby\n    # class of the resource.\n    #\n    # The third argument is an optional hash of conditions to further filter the\n    # objects.\n    # For example, here the user can only update published articles.\n    #\n    #   can :update, Article, :published => true\n    #\n    # See the wiki for details:\n    # https://github.com/ryanb/cancan/wiki/Defining-Abilities\n  end\nend\n"]],"start1":0,"start2":0,"length1":0,"length2":1054}]],"length":1054}
{"contributors":[],"silentsave":false,"ts":1375753641585,"patch":[[{"diffs":[[0,"    "],[-1,"# Define abilities for the passed in user here. For example:\n    #\n    #   user ||= User.new # guest user (not logged in)\n    #   if user.admin?\n    #     can :manage, :all\n    #   else\n    #     can :read, :all\n    #   end\n    #\n    # The first argument to `can` is the action you are giving the user \n    # permission to do.\n    # If you pass :manage it will apply to every action. Other common actions\n    # here are :read, :create, :update and :destroy.\n    #\n    # The second argument is the resource the user can perform the action on. \n    # If you pass :all it will apply to every resource. Otherwise pass a Ruby\n    # class of the resource.\n    #\n    # The third argument is an optional hash of conditions to further filter the\n    # objects.\n    # For example, here the user can only update published articles.\n    #\n    #   can :update, Article, :published => true\n    #\n    # See the wiki for details:\n    # https://github.com/ryanb/cancan/wiki/Defining-Abilities"],[1,"  #user ||= User.new # guest user (not logged in)\n    can :manage, :all if user.role.name == 'admin'\n\tuser.role.permissions.each do |permission|\n\t\tcan permission.action.to_sym, permission.subject_class.constantize do\n\t    \tuser.id.nil? || user.role_id?\n\t    end\n    end"],[0,"\n  e"]],"start1":64,"start2":64,"length1":983,"length2":277}]],"length":348,"saved":false}
